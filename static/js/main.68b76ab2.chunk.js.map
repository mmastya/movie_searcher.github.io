{"version":3,"sources":["stores/Store.js","components/Films.jsx","pages/movies/Movies.jsx","pages/favorites/Favorites.jsx","App.js","serviceWorker.js","index.js"],"names":["configure","enforceActions","store","observable","isInit","allFilms","allTags","selectedTags","Set","search","limit","offset","favorites","onlyFavorites","this","filter","film","has","id","indexOfBySearch","title","indexOf","size","findBySelectedTags","tags","find","tag","init","localAllFilms","localStorage","getItem","JSON","parse","films","map","uuid","setItem","stringify","Array","isArray","error","console","setSearch","setTags","warn","setLimit","currentLimit","setFavorite","filmID","delete","add","from","showFavorites","action","Films","observer","start","end","className","key","type","onChange","checked","slice","length","onClick","Option","Select","Movies","useEffect","to","placeholder","value","event","target","mode","style","width","Favorites","log","process","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.68b76ab2.chunk.js","sourcesContent":["import { observable, action, configure } from \"mobx\";\nimport { films } from \"../dataSource/index\";\nimport { tags } from \"../dataSource/index\";\nimport * as uuid from \"uuid\";\n\nconfigure({ enforceActions: \"observed\" });\n\nexport const store = observable(\n  {\n    isInit: false,\n    allFilms: [],\n    allTags: [],\n    selectedTags: new Set(),\n    search: \"\",\n    limit: 15,\n    offset: 0,\n    favorites: new Set(),\n    onlyFavorites: false,\n    get films() {\n      return this.allFilms.filter(film => {\n        if (this.onlyFavorites) {\n          return this.favorites.has(film.id);\n        }\n\n        const indexOfBySearch = film.title.indexOf(this.search) !== -1;\n\n        if (this.selectedTags.size > 0) {\n          const findBySelectedTags = film.tags.find(tag => {\n            return this.selectedTags.has(tag);\n          });\n\n          return indexOfBySearch && findBySelectedTags;\n        }\n\n        return indexOfBySearch;\n      });\n    },\n\n    init() {\n      if (this.isInit) {\n        return;\n      }\n\n      try {\n        let localAllFilms = localStorage.getItem(\"films\");\n        let favorites = localStorage.getItem(\"favorites\");\n\n        if (localAllFilms) {\n          this.allFilms = JSON.parse(localAllFilms);\n        } else {\n          this.allFilms = films.map(film => {\n            return {\n              ...film,\n              id: uuid.v4()\n            };\n          });\n\n          localStorage.setItem(\"films\", JSON.stringify(this.allFilms));\n        }\n\n        this.allTags = tags;\n\n        if (favorites) {\n          favorites = JSON.parse(favorites);\n\n          if (Array.isArray(favorites)) {\n            this.favorites = new Set(favorites);\n          }\n        }\n      } catch (error) {\n        console.error(error);\n      }\n\n      this.isInit = true;\n    },\n    setSearch(search) {\n      this.search = search;\n    },\n    setTags(selectedTags) {\n      if (Array.isArray(selectedTags)) {\n        this.selectedTags = new Set(selectedTags);\n        this.limit = 15;\n      } else {\n        console.warn(\"Список выбранных тегов должен быть массивом строк\");\n      }\n    },\n    setLimit(currentLimit) {\n      this.limit = currentLimit;\n    },\n    setFavorite(filmID) {\n      if (this.favorites.has(filmID)) {\n        this.favorites.delete(filmID);\n      } else {\n        this.favorites.add(filmID);\n      }\n\n      localStorage.setItem(\n        \"favorites\",\n        JSON.stringify(Array.from(this.favorites))\n      );\n    },\n    showFavorites(onlyFavorites) {\n      this.onlyFavorites = onlyFavorites;\n      this.limit = 15;\n    }\n  },\n  {\n    init: action,\n    setSearch: action,\n    setTags: action,\n    setLimit: action,\n    setFavorite: action,\n    showFavorites: action\n  }\n);\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport \"../blocks/button.scss\";\nimport \"../blocks/movies-list.scss\";\nimport { store } from \"../stores/Store\";\n\nexport const Films = observer(() => {\n  const { films, limit, offset, favorites } = store;\n  const start = offset;\n  const end = limit;\n\n  const showMoreFilms = () => {\n    store.setLimit(limit + 15);\n  };\n\n  return (\n    <>\n      <ul className=\"movies-list\">\n        {films\n          .map(film => {\n            return (\n              <li className=\"movies-list__item\" key={film.id}>\n                {film.title}\n                <input\n                  type=\"checkbox\"\n                  onChange={() => {\n                    store.setFavorite(film.id);\n                  }}\n                  checked={favorites.has(film.id)}\n                ></input>\n              </li>\n            );\n          })\n          .slice(start, end)}\n      </ul>\n      {films.length > limit ? (\n        <button className=\"button\" onClick={showMoreFilms}>\n          Показать еще\n        </button>\n      ) : null}\n    </>\n  );\n});\n","import React, { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { store } from \"../../stores/Store\";\nimport { observer } from \"mobx-react-lite\";\nimport { Films } from \"../../components/Films\";\nimport \"../movies/Movies.scss\";\nimport \"../../blocks/toggle-list.scss\";\nimport \"../../blocks/movies-list.scss\";\nimport \"../../blocks/button.scss\";\n\nimport { Select } from \"antd\";\n\nconst { Option } = Select;\n\nexport const Movies = observer(() => {\n  const { search, allTags, selectedTags } = store;\n\n  useEffect(() => {\n    store.init();\n    store.showFavorites(false);\n  }, []);\n\n  const filterBySearch = event => {\n    store.setSearch(event.target.value);\n  };\n\n  const filterByTags = tags => {\n    store.setTags(tags);\n  };\n\n  return (\n    <div className=\"movies-block\">\n      Страница Фильмы\n      <ul className=\"movies-block__toggle-list toggle-list\">\n        <li className=\"toggle-list__item toggle-list__item--active\">\n          <Link className=\"toggle-list__item-link\" to=\"/\">\n            Фильмы\n          </Link>\n        </li>\n        <li className=\"toggle-list__item\">\n          <Link className=\"toggle-list__item-link\" to=\"/favorites\">\n            Избранное\n          </Link>\n        </li>\n      </ul>\n      <form className=\"movies-block__form\">\n        <input\n          className=\"movies-block__form-input\"\n          type=\"text\"\n          placeholder=\"Поиск\"\n          value={search}\n          onChange={filterBySearch}\n        ></input>\n        <Select\n          className=\"movies-block__form-select\"\n          placeholder=\"Please select\"\n          mode=\"multiple\"\n          style={{ width: \"100%\" }}\n          value={Array.from(selectedTags)}\n          onChange={filterByTags}\n        >\n          {allTags.map(tag => {\n            return (\n              <Option value={tag} key={tag}>\n                {tag}\n              </Option>\n            );\n          })}\n        </Select>\n      </form>\n      <div className=\"movies-block__movies-list\">\n        <Films />\n      </div>\n    </div>\n  );\n});\n","import React, { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { store } from \"../../stores/Store\";\nimport \"../favorites/Favorites.scss\";\nimport \"../../blocks/toggle-list.scss\";\nimport { observer } from \"mobx-react-lite\";\nimport { Films } from \"../../components/Films\";\n\nexport const Favorites = observer(() => {\n  useEffect(() => {\n    store.init();\n    store.showFavorites(true);\n    console.log(11111);\n  }, []);\n\n  return (\n    <div className=\"favorites-block\">\n      Страница закладки\n      <ul className=\"favorites-block__toggle-list toggle-list\">\n        <li className=\"toggle-list__item\">\n          <Link className=\"toggle-list__item-link\" to=\"/\">\n            Фильмы\n          </Link>\n        </li>\n        <li className=\"toggle-list__item toggle-list__item--active\">\n          <Link className=\"toggle-list__item-link\" to=\"/favorites\">\n            Избранное\n          </Link>\n        </li>\n      </ul>\n      <div className=\"favorites-block__movies-list\">\n        <Films/>\n      </div>\n    </div>\n  );\n});\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport { Movies } from './pages/movies/Movies';\nimport { Favorites } from './pages/favorites/Favorites';\nimport { films, tags } from \"./dataSource\";\n\nconsole.log(process.env.PUBLIC_URL)\n\nfunction App() {\n  console.log(films);\n  console.log(tags);\n  return (\n    <Router>\n      <Route path={process.env.PUBLIC_URL} exact component={Movies} />\n      <Route path={`${process.env.PUBLIC_URL}favorites`} component={Favorites} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}